using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;

namespace DT_QLDSV
{
    public partial class FormLop : DevExpress.XtraEditors.XtraForm
    {
        public FormLop()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
        }
        String connStrForm = Program.connstr;
        int chucNang = 0;
        LOP lopSUA = new LOP();
        LOP lopXOA = new LOP();
        List<String> listLenh = new List<String>();
        int vitriPre=0;
        public void enabled(Boolean b)
        {
            bbtnThem.Enabled = bbtnXoa.Enabled = bbtnSua.Enabled = lOPGridControl.Enabled = bbtnPhucHoi.Enabled = bbtnGhi.Enabled = b;
            pnNHAP.Enabled = bbtnKiemTra.Enabled = bbtnHuy.Enabled = !b;
        }


        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboKhoa.DataSource == null || cboKhoa.ValueMember.ToString().Equals("")) return;
            String servername = cboKhoa.SelectedValue.ToString();

            if (listLenh.Count != 0 && DialogResult.Yes == MessageBox.Show("BẠN CẦN GHI TRƯỚC KHI CHUYỂN KHOA,NẾU KHÔNG CÁC THAO TÁC SẼ KHÔNG ĐƯỢC LƯU, BẠN CÓ ĐỒNG Ý KHÔNG???", "THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
            {
                bbtnGhi.PerformClick();
            }
            listLenh.Clear();

            if (servername == null)
            {
                this.Validate();
                this.lOPTableAdapter.Connection.ConnectionString = connStrForm = Program.connstr;
                this.lOPTableAdapter.Fill(this.dS.LOP);
            }
            else if (servername.Equals(Program.svPresent))
            {
                this.lOPTableAdapter.Connection.ConnectionString = connStrForm = Program.connstr;
                this.lOPTableAdapter.Fill(this.dS.LOP);
            }
            else
            {
                String connstr = "Data Source=" + servername + ";Initial Catalog=" +
                      Program.database + ";User ID=" +
                          Program.remotelogin + ";password=" + Program.remotepassword;
                this.lOPTableAdapter.Connection.ConnectionString = connStrForm = connstr;
                this.lOPTableAdapter.Fill(this.dS.LOP);
            }
        }

        private void FormLop_Load(object sender, EventArgs e)
        {
            cboKhoa.DataSource = Program.bds_dspm;
            cboKhoa.DisplayMember = "TENCN";
            cboKhoa.ValueMember = "TENSERVER";
            cboKhoa.SelectedIndex = Program.mChinhanh;
            if (Program.mGroup == "PGV") cboKhoa.Enabled = true;
            // TODO: This line of code loads data into the 'dS.LOP' table. You can move, or remove it, as needed.
            this.lOPTableAdapter.Connection.ConnectionString = Program.connstr;
            this.lOPTableAdapter.Fill(this.dS.LOP);
            Program.frmChinh.enabledButton2(false);
            enabled(true);
        }

        private void bbtnThem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            chucNang = 1;
            enabled(false);
            lOPBindingSource.AddNew();
        }

        private void bbtnXoa_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String strLenh = "dbo.sp_isSVinLop";
            if (Program.conn.State == ConnectionState.Closed)
                Program.conn.Open();
            Program.sqlcmd = Program.conn.CreateCommand();
            Program.sqlcmd.CommandType = CommandType.StoredProcedure;
            Program.sqlcmd.CommandText = strLenh;
            Program.sqlcmd.Parameters.Add("@MALOP", SqlDbType.NChar).Value = txtMaLop.Text.Trim();
            Program.sqlcmd.Parameters.Add("@Ret", SqlDbType.Int).Direction = ParameterDirection.ReturnValue;
            Program.sqlcmd.ExecuteNonQuery();
            String Ret = Program.sqlcmd.Parameters["@Ret"].Value.ToString();
            if (Ret == "1")
            {
                MessageBox.Show("LỚP NÀY ĐÃ CÓ SINH VIÊN NÊN KHỐNG THỂ XÓA, MỜI BẠN KIỂM TRA LẠI!!!", "", MessageBoxButtons.OK);
                Program.conn.Close();
                return;
            }
            if (DialogResult.Yes == MessageBox.Show("Bạn có chắc muốn xóa???", "THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
            {
                chucNang = 2;
                lopXOA.maLop = txtMaLop.Text.Trim();
                lopXOA.tenLop = txtTenLop.Text.Trim();
                if (cboKhoa.SelectedIndex == 0) lopXOA.maKhoa = "CNTT";
                else lopXOA.maKhoa = "VT";
                this.lOPBindingSource.RemoveCurrent();
                String lenh = taoCauTruyVan(chucNang, lopXOA);
                listLenh.Add(lenh);
            }
        }

        private void bbtnSua_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            enabled(false);
            chucNang = 3;
            txtMaLop.Enabled = false;
            lopSUA.maLop = txtMaLop.Text.Trim();
            lopSUA.tenLop = txtTenLop.Text.Trim();
            if (cboKhoa.SelectedIndex == 0) lopSUA.maKhoa = "CNTT";
            else lopSUA.maKhoa = "VT";
        }

        private void bbtnGhi_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String strLenh = "SET XACT_ABORT ON   BEGIN DISTRIBUTED TRANSACTION";
            
            foreach (String lenh in listLenh)
            {
                strLenh += "   " + lenh;
            }
            strLenh += "     COMMIT TRANSACTION";
            if (Program.ExecSqlNonQuery(strLenh, connStrForm) != 0)
            {
                MessageBox.Show("Xảy ra lỗi");
                return;
            }
            listLenh.Clear();
            MessageBox.Show("GHI THÀNH CÔNG!!!");
        }


        private void bbtnPhucHoi_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            if (chucNang == 0)//ko có
            {
                MessageBox.Show("BẠN CHỈ CÓ THỂ QUAY LUI 1 BƯỚC HOẶC VẪN CHƯA CÓ THAO TÁC NÀO ĐƯỢC THỰC HIỆN!!!");
                return;
            }
            
            if (chucNang == 1)//thêm->Xóa
            {
                gridView1.Focus();
                lOPBindingSource.RemoveAt(vitriPre);
            }
            if (chucNang == 2)//Xóa->Thêm
            {
                lOPBindingSource.AddNew();
                txtMaLop.Text = lopXOA.maLop;
                txtTenLop.Text = lopXOA.tenLop;
            }
            if (chucNang == 3)// sửa -> sửa lai sv trước đó
            {
                if (gridView1.FocusedRowHandle != vitriPre)
                {
                    MessageBox.Show("VUI LÒNG CHỌN DÒNG " + (vitriPre+1) + " ĐỂ CÓ THỂ PHỤC HỒI!!!");
                    return;
                }
                gridView1.SelectRow(vitriPre);
                txtTenLop.Text = lopSUA.tenLop;
            }
            listLenh.RemoveAt(listLenh.Count - 1);
            chucNang = 0;
        }

        public Boolean kiemTraNhap()
        {
            if(txtMaLop.Text.Trim().Length== 0||txtTenLop.Text.Trim().Length == 0)
            {
                MessageBox.Show("BẠN KHÔNG ĐƯỢC BỎ TRỐNG THÔNG TIN NÀO, MỜI BẠN KIỂM TRA LẠI !!!");
                return false;
            }
            if(txtMaLop.Text.Trim().Length > 8)
            {
                MessageBox.Show("MÃ LỚP KHÔNG ĐƯỢC QUÁ 8 KÍ TỰ, MỜI BẠN KIỂM TRA LẠI !!!");
                return false;
            }
            if(chucNang!=3 && (txtMaLop.Text.Equals(lopXOA.maLop) == false))
            {
                String strLenh = "dbo.sp_TIMLOP";
                if (Program.conn.State == ConnectionState.Closed)
                    Program.conn.Open();
                Program.sqlcmd = Program.conn.CreateCommand();
                Program.sqlcmd.CommandType = CommandType.StoredProcedure;
                Program.sqlcmd.CommandText = strLenh;
                Program.sqlcmd.Parameters.Add("@MALOP", SqlDbType.NChar).Value = txtMaLop.Text.Trim();
                Program.sqlcmd.Parameters.Add("@TENLOP", SqlDbType.NChar).Value = txtTenLop.Text.Trim();
                Program.sqlcmd.Parameters.Add("@Ret", SqlDbType.Int).Direction = ParameterDirection.ReturnValue;
                Program.sqlcmd.ExecuteNonQuery();
                String Ret = Program.sqlcmd.Parameters["@Ret"].Value.ToString();
                if (Ret == "1")
                {
                    MessageBox.Show("MÃ LỚP NÀY ĐÃ TỒN TẠI, MỜI BẠN KIỂM TRA LẠI!!!", "", MessageBoxButtons.OK);
                    Program.conn.Close();
                    return false;
                }
                else if (Ret == "2")
                {
                    MessageBox.Show("TÊN LỚP NÀY ĐÃ TỒN TẠI, MỜI BẠN KIỂM TRA LẠI!!!", "", MessageBoxButtons.OK);
                    Program.conn.Close();
                    return false;
                }
            }
            return true;
        }

        private void bbtnKiemTra_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            LOP lop = new LOP();
            lop.maLop = txtMaLop.Text.Trim();
            lop.maLop.ToUpper();
            lop.tenLop = txtTenLop.Text.Trim();
            if (cboKhoa.SelectedIndex == 0) lop.maKhoa = "CNTT";
            else lop.maKhoa = "VT";
            if(kiemTraNhap())
            {
                if (DialogResult.Yes == MessageBox.Show("KHÔNG PHÁT HIỆN LỖI NÀO , BẠN CÓ MUỐN LƯU LẠI KHÔNG!!!", "THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    String lenh = taoCauTruyVan(chucNang, lop);
                    listLenh.Add(lenh);
                    gridView1.Focus();
                    if(chucNang==1) vitriPre = lOPBindingSource.Count-1;
                    else vitriPre = gridView1.FocusedRowHandle;
                    if (chucNang == 3) txtMaLop.Enabled = true;
                }
                else
                {
                    enabled(false);
                    return;
                }
            }
            else
            {
                if (DialogResult.Yes == MessageBox.Show("BẠN CÓ MUỐN CHÍNH SỬA HAY KHÔNG ? NẾU KHÔNG THAO TÁC SẼ BỊ HỦY!!!", "THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    enabled(false);
                    return;
                }
                else
                {
                    lOPBindingSource.CancelEdit();
                }
            }
            enabled(true);
            gridView1.Focus();
        }

        private void bbtnHuy_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            lOPBindingSource.CancelEdit();
            if (chucNang == 3) txtMaLop.Enabled = true;
            enabled(true);
        }
        public String taoCauTruyVan(int CN, LOP lop)
        {
            String strLenh = "";
            if (CN == 1)
            {
                strLenh = "insert into LOP(MALOP,TENLOP,MAKH) values('" + lop.maLop +"',N'"+lop.tenLop+"','"+lop.maKhoa+"')";
            }
            else if (CN == 2)
            {
                strLenh = "delete from LOP where MALOP='"+lop.maLop+"'";
            }
            else
            {
                strLenh = "update LOP set TENLOP =N'"+lop.tenLop+"' where MALOP='"+lop.maLop+"'";
            }
            return strLenh;
        }

        private void FormLop_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (listLenh.Count != 0 && DialogResult.Yes == MessageBox.Show("BẠN CẦN GHI TRƯỚC KHI TẮT FORM,NẾU KHÔNG CÁC THAO TÁC SẼ KHÔNG ĐƯỢC LƯU, BẠN CÓ ĐỒNG Ý KHÔNG???", "THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
            {
                bbtnGhi.PerformClick();
            }
            Program.conn.Close();
            Program.frmChinh.enabledButton(true);
        }

    }

    public class LOP
    {
        public String maLop { get; set; }
        public String tenLop { get; set; }
        public String maKhoa { get; set; }
    }
}